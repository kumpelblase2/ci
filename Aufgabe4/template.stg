group template;

sums(symbols,sums) ::= <<
import choco.Options;
import choco.cp.model.CPModel;
import choco.cp.solver.CPSolver;
import choco.kernel.model.Model;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.solver.Solver;
import java.util.HashSet;
import java.util.Set;


public class CSolver {

	public static void main(String[] args) {
		Model model = new CPModel();
	
		IntegerVariable A = makeIntVar("a", 0, 9, Options.V_ENUM);
		IntegerVariable B = makeIntVar("b", 0, 9, Options.V_ENUM);
		IntegerVariable C = makeIntVar("c", 0, 9, Options.V_ENUM);
		IntegerVariable D = makeIntVar("d", 0, 9, Options.V_ENUM);
		IntegerVariable E = makeIntVar("e", 0, 9, Options.V_ENUM);
		IntegerVariable F = makeIntVar("f", 0, 9, Options.V_ENUM);
		IntegerVariable G = makeIntVar("g", 0, 9, Options.V_ENUM);
		IntegerVariable H = makeIntVar("h", 0, 9, Options.V_ENUM);
		IntegerVariable I = makeIntVar("i", 0, 9, Options.V_ENUM);
		IntegerVariable J = makeIntVar("j", 0, 9, Options.V_ENUM);
		IntegerVariable K = makeIntVar("k", 0, 9, Options.V_ENUM);
		IntegerVariable L = makeIntVar("l", 0, 9, Options.V_ENUM);
		IntegerVariable M = makeIntVar("m", 0, 9, Options.V_ENUM);
		IntegerVariable N = makeIntVar("n", 0, 9, Options.V_ENUM);
		IntegerVariable O = makeIntVar("o", 0, 9, Options.V_ENUM);
		IntegerVariable P = makeIntVar("p", 0, 9, Options.V_ENUM);
		IntegerVariable Q = makeIntVar("q", 0, 9, Options.V_ENUM);
		IntegerVariable R = makeIntVar("r", 0, 9, Options.V_ENUM);
		IntegerVariable S = makeIntVar("s", 0, 9, Options.V_ENUM);
		IntegerVariable T = makeIntVar("t", 0, 9, Options.V_ENUM);
		IntegerVariable U = makeIntVar("u", 0, 9, Options.V_ENUM);
		IntegerVariable V = makeIntVar("v", 0, 9, Options.V_ENUM);
		IntegerVariable W = makeIntVar("w", 0, 9, Options.V_ENUM);
		IntegerVariable X = makeIntVar("x", 0, 9, Options.V_ENUM);
		IntegerVariable Y = makeIntVar("y", 0, 9, Options.V_ENUM);
		IntegerVariable Z = makeIntVar("z", 0, 9, Options.V_ENUM);
		
		IntegerVariable ZERO = makeIntVar("ZERO", 0, 0, Options.V_ENUM);	
		Set\<IntegerVariable\> used = new HashSet\<IntegerVariable\>();
		
		IntegerVariable prevCarry = ZERO;
		IntegerVariable carry;
		int index = 0;
	
		<sums>
		
		model.addConstraint(allDifferent(used.toArray(new IntegerVariable[used.size()])));
		Solver s = new CPSolver();
		s.read(model);
		s.solve();
		for(IntegerVariable var : used) {
			System.out.println(var.getName() + " = " + s.getVar(var).getVal());
		}
	}
}
;separator="\n">>


sum(number1, number2, number3) ::= <<
<number1.characters, number2.characters, number3.characters :
  {n1, n2, n3 |	carry = makeIntVar("u" + index++, 0, 1, Options.V_ENUM);
model.addConstraint(eq(plus(plus(<if(n1)><n1><else>ZERO<endif>, <if(n2)><n2><else>ZERO<endif>), prevCarry), plus(<if(n3)><n3><else>ZERO<endif>, mult(carry, 10))));
<if(n1)>used.add(<n1>);<endif>
<if(n2)>used.add(<n2>);<endif>
<if(n3)>used.add(<n3>);<endif>
System.out.println(carry);
prevCarry = carry;}
  ; separator="\n">
prevCarry = ZERO;
>>